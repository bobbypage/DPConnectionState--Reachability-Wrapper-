DPConnectionState
=============

DPConnectionState is a iPhone drop-in class that makes working with Reachability much easier. Using DPConnectionState you can use two lines of code to detect if the user has internet connectivity. DPConnectionState is released under the MIT license (see below).


[![](http://i.imgur.com/BaKmY.jpg)](http://i.imgur.com/nD0UI.png)




Adding DPConnectionState to your project
====================================
To add DPConnectionState to your project open SampleProject.xcodeproj and drag the DPConnectionState Files from the Sample Project to your own project. This will add the DPConnectionState helper class and Reachability class into your project. Next add the SystemConfiguration framework. Now you are able to import the DPConnectionState.h file into your view controller, etc...

Using DPConnectionState in your project 
====================================
After you have copied the needed files in your project you can begin working with DPConnectionState. (see above)

To use DPConnectionState import it into your header like this: 
`#import "DPConnectionState.h"`

Now you can use DPConnectionState. Go into your header and add the DPConnectionDelegate if you wish to use it. More on that below… For example: 

    @interface SampleProjectViewController : UIViewController 
    <DPConnectionStateDelegate>  

Also add a reference to DPConnection state in your header… like this: 

`DPConnectionState *currentConnectivity;`

In your implementation file using DPConnectionState is very simple. When you are ready to monitor the user's connection state to the internet do something like this:

    currentConnectivity = [[DPConnectionState alloc] init];
    currentConnectivity.delegate = self; //set the delegate (only if you want to use it, see below…)
    [currentConnectivity startMonitoringConnection]; //call this when you are ready for DPConnection state to monitor the connection

You may want to do the above in your viewDidLoad or similar…

Now DPConnection is actively monitoring the user's connection to the internet. 

If you would like to check if the user is connected before a event you can check using the isConnected property. 

You can do something like this:

    - (void)doSomethingInternetRelated {

    if (currentConnectivity.isConnected) {

    //go ahead and continue with the task as the user is connected to the internet

    }
    else {

    //alert the user they are not connected to the internet

    }

    }


DPConnectionState also has one delegate method: 

`- (void)connectivityStateDidChange;`

This is called if the user's state changes. (for example the user is first connected to 3G but loses internet connectivity. If you wish, you may use the delegate method.


License
=============

This code is distributed under the terms and conditions of the MIT license.

Copyright (c) 2010 David Porter

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.